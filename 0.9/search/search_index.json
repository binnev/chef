{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"yes-chef A natural language command-line tool for managing recipes and making shopping lists. Installation You can install yes-chef by cloning this repo and running the install.sh script. This will install the chef command to your ~/.local/bin . You may need to add this to your PATH variable to be able to run chef from anywhere. Quick start To get started, please see the walkthrough . Or, if you want to dive straight in, you can always use $ chef --help to explore commands and see the help text. Happy cheffing! :)","title":"Home"},{"location":"#yes-chef","text":"A natural language command-line tool for managing recipes and making shopping lists.","title":"yes-chef"},{"location":"#installation","text":"You can install yes-chef by cloning this repo and running the install.sh script. This will install the chef command to your ~/.local/bin . You may need to add this to your PATH variable to be able to run chef from anywhere.","title":"Installation"},{"location":"#quick-start","text":"To get started, please see the walkthrough . Or, if you want to dive straight in, you can always use $ chef --help to explore commands and see the help text. Happy cheffing! :)","title":"Quick start"},{"location":"commands/export/","text":"export chef export yes-chef will create the markdown recipes in the <your-recipe-library>/md folder. It will also generate a README.md file with an index of recipes, in your recipe library. The index has clickable links to the markdown recipe files, so you can easily browse recipes on your phone or tablet in the kitchen.","title":"export"},{"location":"commands/export/#export","text":"chef export yes-chef will create the markdown recipes in the <your-recipe-library>/md folder. It will also generate a README.md file with an index of recipes, in your recipe library. The index has clickable links to the markdown recipe files, so you can easily browse recipes on your phone or tablet in the kitchen.","title":"export"},{"location":"commands/init/","text":"init chef init <DIRECTORY> Sets up a new recipe library in the given directory. ~/foo$ chef init . robin@lgn:~/foo$ ll total 28 drwxrwxr-x 5 robin robin 4096 Mar 10 15:20 ./ drwxr-xr-x 42 robin robin 12288 Mar 10 15:20 ../ drwxrwxr-x 2 robin robin 4096 Mar 10 15:20 .chef/ drwxrwxr-x 2 robin robin 4096 Mar 10 15:20 md/ drwxrwxr-x 2 robin robin 4096 Mar 10 15:20 yaml/","title":"init"},{"location":"commands/init/#init","text":"chef init <DIRECTORY> Sets up a new recipe library in the given directory. ~/foo$ chef init . robin@lgn:~/foo$ ll total 28 drwxrwxr-x 5 robin robin 4096 Mar 10 15:20 ./ drwxr-xr-x 42 robin robin 12288 Mar 10 15:20 ../ drwxrwxr-x 2 robin robin 4096 Mar 10 15:20 .chef/ drwxrwxr-x 2 robin robin 4096 Mar 10 15:20 md/ drwxrwxr-x 2 robin robin 4096 Mar 10 15:20 yaml/","title":"init"},{"location":"commands/new_plan/","text":"new plan chef new plan Creates a new Plan (collection of recipes). You can plan multiple recipes by adding them to the plan .","title":"new plan"},{"location":"commands/new_plan/#new-plan","text":"chef new plan Creates a new Plan (collection of recipes). You can plan multiple recipes by adding them to the plan .","title":"new plan"},{"location":"commands/new_recipe/","text":"new recipe chef new recipe The recipe wizard will guide you through creating a YAML recipe. For example, to create a simple porridge recipe: $ chef new recipe name: porridge author: me Ingredients: format: [amount, [unit,]] name [; prep] enter an ingredient [leave blank to finish]: 50, g, oats enter an ingredient [leave blank to finish]: 100, ml, water enter an ingredient [leave blank to finish]: brown sugar enter an ingredient [leave blank to finish]: Method: enter a method step [leave blank to finish]: put the oats and water in the pan enter a method step [leave blank to finish]: cook until bla enter a method step [leave blank to finish]: serve enter a method step [leave blank to finish]: Equipment: what equipment do you need? [leave blank to finish]: small saucepan what equipment do you need? [leave blank to finish]: stove what equipment do you need? [leave blank to finish]: prep_minutes (int) [0]: 1 cook_minutes (int) [0]: 5 servings (int) [0]: 1 source (url or book name): www.porridge.com image (url or local image): porridge.jpg notes: easy peasy Created recipe recipe-library/yaml/porridge.yaml This will generate the following porridge.yaml : name: porridge author: me prep_minutes: 1 cook_minutes: 5 servings: 1 source: www.porridge.com image: porridge.jpg notes: easy peasy equipment: - small saucepan - stove ingredients: - 50, g, oats - 100, ml, water - brown sugar method: - put the oats and water in the pan - cook until the desired thickness is reached - serve with some brown sugar to taste Once you understand the fields and syntax expected by the yaml format, you can also create the yaml files directly. To read more about the YAML format here","title":"new recipe"},{"location":"commands/new_recipe/#new-recipe","text":"chef new recipe The recipe wizard will guide you through creating a YAML recipe. For example, to create a simple porridge recipe: $ chef new recipe name: porridge author: me Ingredients: format: [amount, [unit,]] name [; prep] enter an ingredient [leave blank to finish]: 50, g, oats enter an ingredient [leave blank to finish]: 100, ml, water enter an ingredient [leave blank to finish]: brown sugar enter an ingredient [leave blank to finish]: Method: enter a method step [leave blank to finish]: put the oats and water in the pan enter a method step [leave blank to finish]: cook until bla enter a method step [leave blank to finish]: serve enter a method step [leave blank to finish]: Equipment: what equipment do you need? [leave blank to finish]: small saucepan what equipment do you need? [leave blank to finish]: stove what equipment do you need? [leave blank to finish]: prep_minutes (int) [0]: 1 cook_minutes (int) [0]: 5 servings (int) [0]: 1 source (url or book name): www.porridge.com image (url or local image): porridge.jpg notes: easy peasy Created recipe recipe-library/yaml/porridge.yaml This will generate the following porridge.yaml : name: porridge author: me prep_minutes: 1 cook_minutes: 5 servings: 1 source: www.porridge.com image: porridge.jpg notes: easy peasy equipment: - small saucepan - stove ingredients: - 50, g, oats - 100, ml, water - brown sugar method: - put the oats and water in the pan - cook until the desired thickness is reached - serve with some brown sugar to taste Once you understand the fields and syntax expected by the yaml format, you can also create the yaml files directly. To read more about the YAML format here","title":"new recipe"},{"location":"commands/plan_recipe/","text":"plan recipe chef plan <QUERY> yes-chef searches your recipe library for recipes matching the query. If it finds multiple matches, it will prompt you to choose one: $ chef plan madras [?] Which recipe did you mean?: > Chicken madras lamb pork or beef madras chicken madras curryhouse style Added Chicken madras by Neelam Bajwa to plan. Plan is now: Plan (created at 2024-03-10 14:08:41.158247) If it finds only one match, it skips the prompt: $ chef plan porridge Added porridge by me to plan. Plan is now: Plan (created at 2024-03-10 14:08:41.158247) If it finds no matches, it exits with an error: $ chef plan foobar Couldn't find any recipes for foobar","title":"plan recipe"},{"location":"commands/plan_recipe/#plan-recipe","text":"chef plan <QUERY> yes-chef searches your recipe library for recipes matching the query. If it finds multiple matches, it will prompt you to choose one: $ chef plan madras [?] Which recipe did you mean?: > Chicken madras lamb pork or beef madras chicken madras curryhouse style Added Chicken madras by Neelam Bajwa to plan. Plan is now: Plan (created at 2024-03-10 14:08:41.158247) If it finds only one match, it skips the prompt: $ chef plan porridge Added porridge by me to plan. Plan is now: Plan (created at 2024-03-10 14:08:41.158247) If it finds no matches, it exits with an error: $ chef plan foobar Couldn't find any recipes for foobar","title":"plan recipe"},{"location":"commands/view_list/","text":"view list chef view list Merges the ingredients from all the recipes you have planned into one shopping list. It will merge multiple ingredients together if the units allow it. $ chef view list Current shopping list: Kashmiri chillies: 3 Madras Curry Powder: 6 tsp brown sugar: enough for porridge cabbage: 60.0 ml carrot: 1 chicken: 750 g chilli powder: 6 tsp coriander powder: 4 tsp cumin powder: 4 tsp fresh coriander: enough for Chicken madras garlic: 3 clove garlic paste: 3 tsp ghee: 6 tsp ghee or veg oil: 6 tsp ginger: 1 inch ginger paste: 3 tsp green cardamoms: 4 green chillies: 3 ground methi seeds: 1.5 tsp oats: 50 g onions: 2 red bell pepper: 1 tomato puree or paste: 3 tsp tomatoes: 2 turmeric: 1 pinch 1 tsp water: 100 ml","title":"view list"},{"location":"commands/view_list/#view-list","text":"chef view list Merges the ingredients from all the recipes you have planned into one shopping list. It will merge multiple ingredients together if the units allow it. $ chef view list Current shopping list: Kashmiri chillies: 3 Madras Curry Powder: 6 tsp brown sugar: enough for porridge cabbage: 60.0 ml carrot: 1 chicken: 750 g chilli powder: 6 tsp coriander powder: 4 tsp cumin powder: 4 tsp fresh coriander: enough for Chicken madras garlic: 3 clove garlic paste: 3 tsp ghee: 6 tsp ghee or veg oil: 6 tsp ginger: 1 inch ginger paste: 3 tsp green cardamoms: 4 green chillies: 3 ground methi seeds: 1.5 tsp oats: 50 g onions: 2 red bell pepper: 1 tomato puree or paste: 3 tsp tomatoes: 2 turmeric: 1 pinch 1 tsp water: 100 ml","title":"view list"},{"location":"commands/view_plan/","text":"view plan chef view plan Shows you which recipes you have planned so far: $ chef view plan Current plan: created: 2024-03-10T14:08:41.158247 recipes: Chicken madras by Neelam Bajwa porridge by me","title":"view plan"},{"location":"commands/view_plan/#view-plan","text":"chef view plan Shows you which recipes you have planned so far: $ chef view plan Current plan: created: 2024-03-10T14:08:41.158247 recipes: Chicken madras by Neelam Bajwa porridge by me","title":"view plan"},{"location":"how-to/walkthrough/","text":"Walkthrough In this section we'll walk through the minimum commands required to use yes-chef . For more detailed information on the available commands, see the commands section, or run $ chef --help Creating a new recipe library yes-chef needs a place to store recipe files. You can think of this as a git repository for your recipes. Create a new recipe library in the current directory by running: $ chef init . It is recommended to check your recipe folder into a public github repository; this way you can browse and view your recipes on your phone in the kitchen. For example, see my recipe library . Adding a new recipe Use the recipe wizard , or, if you want to write the YAML files yourself, you can read more about the YAML syntax here . Exporting your YAML recipes to Markdown See the export command. Planning meals and making a shopping list One of the main features of yes-chef is its ability to create a shopping list for multiple recipes. Let's create a new plan with $ chef new plan created new plan A plan is just a collection of recipes for which we want to generate a shopping list. Let's add our porridge recipe : $ chef plan porridge Added porridge by me to plan. yes-chef searches your recipe library for \"porridge\", finds the porridge recipe, and adds it to the plan. Now let's view the plan : $ chef view plan Current plan: created: 2024-03-03T09:22:55.979689 recipes: porridge by me And we can view the shopping list by running $ chef view list Current shopping list: oats: 50 g water: enough for porridge So far, so good. Now let's say we want to plan 2 days worth of porridge -- we can add porridge a second time: $ chef plan porridge Added porridge by me to plan. Now our shopping list looks like this: $ chef view list Current shopping list: oats: 100 g water: enough for porridge (x2) The amount of oats has doubled, and the entry for \"water\" has updated too, even though our porridge recipe doesn't specify an amount for water. This is a trivial example, but it really gets useful when we plan several large recipes. yes-chef will intelligently merge the ingredients lists. If several recipes call for \"fresh coriander\" (no amount specified), this will be displayed like this, so that you know how much \"fresh coriander\" you need to buy: fresh coriander: enough for: Chicken madras Dhaal yes-chef will try to sum amounts when it makes sense to do so. (Like in the porridge example above, it knows that 25g + 25g = 50g ). When the units are incompatible, it will display the amounts organised by ingredient, so that you can quickly do the math yourself: garlic: 3 cloves 4 tsp 1.0 bulb","title":"Walkthrough"},{"location":"how-to/walkthrough/#walkthrough","text":"In this section we'll walk through the minimum commands required to use yes-chef . For more detailed information on the available commands, see the commands section, or run $ chef --help","title":"Walkthrough"},{"location":"how-to/walkthrough/#creating-a-new-recipe-library","text":"yes-chef needs a place to store recipe files. You can think of this as a git repository for your recipes. Create a new recipe library in the current directory by running: $ chef init . It is recommended to check your recipe folder into a public github repository; this way you can browse and view your recipes on your phone in the kitchen. For example, see my recipe library .","title":"Creating a new recipe library"},{"location":"how-to/walkthrough/#adding-a-new-recipe","text":"Use the recipe wizard , or, if you want to write the YAML files yourself, you can read more about the YAML syntax here .","title":"Adding a new recipe"},{"location":"how-to/walkthrough/#exporting-your-yaml-recipes-to-markdown","text":"See the export command.","title":"Exporting your YAML recipes to Markdown"},{"location":"how-to/walkthrough/#planning-meals-and-making-a-shopping-list","text":"One of the main features of yes-chef is its ability to create a shopping list for multiple recipes. Let's create a new plan with $ chef new plan created new plan A plan is just a collection of recipes for which we want to generate a shopping list. Let's add our porridge recipe : $ chef plan porridge Added porridge by me to plan. yes-chef searches your recipe library for \"porridge\", finds the porridge recipe, and adds it to the plan. Now let's view the plan : $ chef view plan Current plan: created: 2024-03-03T09:22:55.979689 recipes: porridge by me And we can view the shopping list by running $ chef view list Current shopping list: oats: 50 g water: enough for porridge So far, so good. Now let's say we want to plan 2 days worth of porridge -- we can add porridge a second time: $ chef plan porridge Added porridge by me to plan. Now our shopping list looks like this: $ chef view list Current shopping list: oats: 100 g water: enough for porridge (x2) The amount of oats has doubled, and the entry for \"water\" has updated too, even though our porridge recipe doesn't specify an amount for water. This is a trivial example, but it really gets useful when we plan several large recipes. yes-chef will intelligently merge the ingredients lists. If several recipes call for \"fresh coriander\" (no amount specified), this will be displayed like this, so that you know how much \"fresh coriander\" you need to buy: fresh coriander: enough for: Chicken madras Dhaal yes-chef will try to sum amounts when it makes sense to do so. (Like in the porridge example above, it knows that 25g + 25g = 50g ). When the units are incompatible, it will display the amounts organised by ingredient, so that you can quickly do the math yourself: garlic: 3 cloves 4 tsp 1.0 bulb","title":"Planning meals and making a shopping list"},{"location":"recipe/markdown/","text":"Exporting to Markdown The export command converts your YAML recipes into a more viewable Markdown format. The markdown recipes can be browsed from your phone / tablet in the kitchen. This is how the example recipe from YAML recipe format will look when exported to markdown: Porridge Author: Me From: www.porridge.com Servings: 1 Preparation: 1 minutes Cooking: 5 minutes Notes: easy peasy Equipment: Small saucepan Stove Ingredients: [ ] 50 g oats [ ] 100 ml water [ ] Brown sugar Method: Put the oats and water in the pan Cook until the desired thickness is reached Serve with some brown sugar to taste","title":"Exporting to Markdown"},{"location":"recipe/markdown/#exporting-to-markdown","text":"The export command converts your YAML recipes into a more viewable Markdown format. The markdown recipes can be browsed from your phone / tablet in the kitchen. This is how the example recipe from YAML recipe format will look when exported to markdown:","title":"Exporting to Markdown"},{"location":"recipe/markdown/#porridge","text":"Author: Me From: www.porridge.com Servings: 1 Preparation: 1 minutes Cooking: 5 minutes Notes: easy peasy","title":"Porridge"},{"location":"recipe/markdown/#equipment","text":"Small saucepan Stove","title":"Equipment:"},{"location":"recipe/markdown/#ingredients","text":"[ ] 50 g oats [ ] 100 ml water [ ] Brown sugar","title":"Ingredients:"},{"location":"recipe/markdown/#method","text":"Put the oats and water in the pan Cook until the desired thickness is reached Serve with some brown sugar to taste","title":"Method:"},{"location":"recipe/yaml/","text":"YAML recipe format Recipes are stored as YAML files. YAML is a machine readable data format that is also very human readable, with minimal syntax. This makes it an excellent way to declare non-technical things like recipes, while still allowing them to be machine-readable. Recipe syntax The only required fields in a recipe are name and ingredients . This is a minimal example recipe: name: porridge ingredients: - 50, g, oats - water and this is the same recipe, but with all the optional fields populated: name: porridge author: me prep_minutes: 1 cook_minutes: 5 servings: 1 source: www.porridge.com image: porridge.jpg # this file must exist in the /images folder notes: easy peasy equipment: - small saucepan - stove ingredients: - 50, g, oats - 100, ml, water - brown sugar method: - put the oats and water in the pan - cook until the desired thickness is reached - serve with some brown sugar to taste Ingredient syntax Ingredient has 4 fields: name (required) amount (optional) unit (optional) prep (optional) To preserve the natural-language feel of the input files, We use a custom syntax to declare ingredients. Commas separate the amount, units, and name of the ingredient. The following examples are valid: ingredients: - apples # amountless - 2, apples # unitless - 2, kg, apples # with units and all variants can have the optional prep instructions separated by a semicolon: ingredients: - apples; chopped - 2, apples; chopped - 2, kg, apples; chopped Writing this with correct YAML syntax would produce very verbose input files: ingredients: - apples: # amountless amount: None units: None - apples: # unitless amount: 2 units: None - apples: # with units amount: 2 units: kg","title":"YAML recipe format"},{"location":"recipe/yaml/#yaml-recipe-format","text":"Recipes are stored as YAML files. YAML is a machine readable data format that is also very human readable, with minimal syntax. This makes it an excellent way to declare non-technical things like recipes, while still allowing them to be machine-readable.","title":"YAML recipe format"},{"location":"recipe/yaml/#recipe-syntax","text":"The only required fields in a recipe are name and ingredients . This is a minimal example recipe: name: porridge ingredients: - 50, g, oats - water and this is the same recipe, but with all the optional fields populated: name: porridge author: me prep_minutes: 1 cook_minutes: 5 servings: 1 source: www.porridge.com image: porridge.jpg # this file must exist in the /images folder notes: easy peasy equipment: - small saucepan - stove ingredients: - 50, g, oats - 100, ml, water - brown sugar method: - put the oats and water in the pan - cook until the desired thickness is reached - serve with some brown sugar to taste","title":"Recipe syntax"},{"location":"recipe/yaml/#ingredient-syntax","text":"Ingredient has 4 fields: name (required) amount (optional) unit (optional) prep (optional) To preserve the natural-language feel of the input files, We use a custom syntax to declare ingredients. Commas separate the amount, units, and name of the ingredient. The following examples are valid: ingredients: - apples # amountless - 2, apples # unitless - 2, kg, apples # with units and all variants can have the optional prep instructions separated by a semicolon: ingredients: - apples; chopped - 2, apples; chopped - 2, kg, apples; chopped Writing this with correct YAML syntax would produce very verbose input files: ingredients: - apples: # amountless amount: None units: None - apples: # unitless amount: 2 units: None - apples: # with units amount: 2 units: kg","title":"Ingredient syntax"},{"location":"reference/ingredient/","text":"Ingredient Bases: BaseModel Represents one ingredient in the ingredient list of a Recipe. Attributes: name ( str ) \u2013 the name of the ingredient e.g. \"apples\" amount ( int | float ) \u2013 how much of the ingredient e.g. 2 unit ( str ) \u2013 optional unit e.g. \"kg\" prep ( str ) \u2013 optional preparation instructions e.g. \"chopped\" Source code in src/api/ingredient.py class Ingredient(BaseModel): \"\"\" Represents one ingredient in the ingredient list of a Recipe. Attributes: name: the name of the ingredient e.g. \"apples\" amount: how much of the ingredient e.g. 2 unit: optional unit e.g. \"kg\" prep: optional preparation instructions e.g. \"chopped\" \"\"\" name: str amount: int | float = 0 unit: str = \"\" prep: str = \"\" @classmethod def from_str(cls, s: str) -> \"Ingredient\": \"\"\" Args: s: the ingredient string (see `parse_ingredient_str`) Returns: the Ingredient instance Raises: ParseIngredientError: if the ingredient can't be parsed \"\"\" return Ingredient(**parse_ingredient_str(s)) def __str__(self): match [self.name, self.amount, self.unit]: case [name, 0, \"\"]: result = f\"{name}\" case [name, amount, \"\"]: result = f\"{amount} {name}\" case [name, amount, unit]: result = f\"{amount} {unit} {name}\" case _: raise RuntimeError(\"unreachable\") if self.prep: result += f\", {self.prep}\" return result def to_yaml_str(self): match [self.name, self.amount, self.unit]: case [name, 0, \"\"]: result = f\"{name}\" case [name, amount, \"\"]: result = f\"{amount}, {name}\" case [name, amount, unit]: result = f\"{amount}, {unit}, {name}\" case _: raise RuntimeError(\"unreachable\") if self.prep: result += f\"; {self.prep}\" return result from_str(s) classmethod Parameters: s ( str ) \u2013 the ingredient string (see parse_ingredient_str ) Returns: Ingredient \u2013 the Ingredient instance Raises: ParseIngredientError \u2013 if the ingredient can't be parsed Source code in src/api/ingredient.py @classmethod def from_str(cls, s: str) -> \"Ingredient\": \"\"\" Args: s: the ingredient string (see `parse_ingredient_str`) Returns: the Ingredient instance Raises: ParseIngredientError: if the ingredient can't be parsed \"\"\" return Ingredient(**parse_ingredient_str(s)) parse_ingredient_str(s) Parameters: s ( str ) \u2013 the ingredient string (see examples) Returns: dict \u2013 A dictionary of values describing an Ingredient Raises: ParseIngredientError \u2013 if the ingredient cannot be parsed Examples: name only: \"apple\" amount and name: \"1, apple\" amount, unit and name: \"1, kg, apples\" amount, unit, name, and prep: \"1, kg, apples; chopped\" Source code in src/api/ingredient.py def parse_ingredient_str(s: str) -> dict: \"\"\" Args: s: the ingredient string (see examples) Returns: A dictionary of values describing an Ingredient Raises: ParseIngredientError: if the ingredient cannot be parsed Examples: - name only: \"apple\" - amount and name: \"1, apple\" - amount, unit and name: \"1, kg, apples\" - amount, unit, name, and prep: \"1, kg, apples; chopped\" \"\"\" output = {} match list(map(str.strip, s.split(\";\"))): case [\"\"]: raise ParseIngredientError(\"empty input\") case [s]: pass case [s, \"\"]: # trailing \";\" and empty prep pass case [s, prep]: # non-empty prep output[\"prep\"] = prep case _: raise ParseIngredientError(f\"Too many semicolons: {s}\") match list(map(str.strip, s.split(\",\"))): case [\"\"]: raise ParseIngredientError(\"Got prep but no ingredients\") case [amount, name]: # e.g. 1, apple if not name: raise ParseIngredientError(\"empty value: name\") if not amount: raise ParseIngredientError(\"empty value: amount\") output[\"name\"] = name output[\"amount\"] = _parse_number(amount) case [amount, unit, name]: # e,g. 1, kg, apples output[\"name\"] = name output[\"amount\"] = _parse_number(amount) output[\"unit\"] = unit case [name]: output[\"name\"] = name case _: raise ParseIngredientError(f\"Too many commas: {s}\") return output","title":"Ingredient"},{"location":"reference/ingredient/#src.api.ingredient.Ingredient","text":"Bases: BaseModel Represents one ingredient in the ingredient list of a Recipe. Attributes: name ( str ) \u2013 the name of the ingredient e.g. \"apples\" amount ( int | float ) \u2013 how much of the ingredient e.g. 2 unit ( str ) \u2013 optional unit e.g. \"kg\" prep ( str ) \u2013 optional preparation instructions e.g. \"chopped\" Source code in src/api/ingredient.py class Ingredient(BaseModel): \"\"\" Represents one ingredient in the ingredient list of a Recipe. Attributes: name: the name of the ingredient e.g. \"apples\" amount: how much of the ingredient e.g. 2 unit: optional unit e.g. \"kg\" prep: optional preparation instructions e.g. \"chopped\" \"\"\" name: str amount: int | float = 0 unit: str = \"\" prep: str = \"\" @classmethod def from_str(cls, s: str) -> \"Ingredient\": \"\"\" Args: s: the ingredient string (see `parse_ingredient_str`) Returns: the Ingredient instance Raises: ParseIngredientError: if the ingredient can't be parsed \"\"\" return Ingredient(**parse_ingredient_str(s)) def __str__(self): match [self.name, self.amount, self.unit]: case [name, 0, \"\"]: result = f\"{name}\" case [name, amount, \"\"]: result = f\"{amount} {name}\" case [name, amount, unit]: result = f\"{amount} {unit} {name}\" case _: raise RuntimeError(\"unreachable\") if self.prep: result += f\", {self.prep}\" return result def to_yaml_str(self): match [self.name, self.amount, self.unit]: case [name, 0, \"\"]: result = f\"{name}\" case [name, amount, \"\"]: result = f\"{amount}, {name}\" case [name, amount, unit]: result = f\"{amount}, {unit}, {name}\" case _: raise RuntimeError(\"unreachable\") if self.prep: result += f\"; {self.prep}\" return result","title":"Ingredient"},{"location":"reference/ingredient/#src.api.ingredient.Ingredient.from_str","text":"Parameters: s ( str ) \u2013 the ingredient string (see parse_ingredient_str ) Returns: Ingredient \u2013 the Ingredient instance Raises: ParseIngredientError \u2013 if the ingredient can't be parsed Source code in src/api/ingredient.py @classmethod def from_str(cls, s: str) -> \"Ingredient\": \"\"\" Args: s: the ingredient string (see `parse_ingredient_str`) Returns: the Ingredient instance Raises: ParseIngredientError: if the ingredient can't be parsed \"\"\" return Ingredient(**parse_ingredient_str(s))","title":"from_str"},{"location":"reference/ingredient/#src.api.ingredient.parse_ingredient_str","text":"Parameters: s ( str ) \u2013 the ingredient string (see examples) Returns: dict \u2013 A dictionary of values describing an Ingredient Raises: ParseIngredientError \u2013 if the ingredient cannot be parsed Examples: name only: \"apple\" amount and name: \"1, apple\" amount, unit and name: \"1, kg, apples\" amount, unit, name, and prep: \"1, kg, apples; chopped\" Source code in src/api/ingredient.py def parse_ingredient_str(s: str) -> dict: \"\"\" Args: s: the ingredient string (see examples) Returns: A dictionary of values describing an Ingredient Raises: ParseIngredientError: if the ingredient cannot be parsed Examples: - name only: \"apple\" - amount and name: \"1, apple\" - amount, unit and name: \"1, kg, apples\" - amount, unit, name, and prep: \"1, kg, apples; chopped\" \"\"\" output = {} match list(map(str.strip, s.split(\";\"))): case [\"\"]: raise ParseIngredientError(\"empty input\") case [s]: pass case [s, \"\"]: # trailing \";\" and empty prep pass case [s, prep]: # non-empty prep output[\"prep\"] = prep case _: raise ParseIngredientError(f\"Too many semicolons: {s}\") match list(map(str.strip, s.split(\",\"))): case [\"\"]: raise ParseIngredientError(\"Got prep but no ingredients\") case [amount, name]: # e.g. 1, apple if not name: raise ParseIngredientError(\"empty value: name\") if not amount: raise ParseIngredientError(\"empty value: amount\") output[\"name\"] = name output[\"amount\"] = _parse_number(amount) case [amount, unit, name]: # e,g. 1, kg, apples output[\"name\"] = name output[\"amount\"] = _parse_number(amount) output[\"unit\"] = unit case [name]: output[\"name\"] = name case _: raise ParseIngredientError(f\"Too many commas: {s}\") return output","title":"parse_ingredient_str"},{"location":"reference/shopping_list/","text":"Handles the merging of multiple ingredient lists into one shopping list. MergedIngredient Bases: BaseModel Container class to hold merged Ingredients. Handles a mixture of amountless, unitless, and fully populated Ingredients. It is not possible to merge a fully populated unit with an amountless unit -- e.g. \"2, kg, potatoes\" and \"potatoes\". This is why we need the following attributes Attributes: amountless ( list [ RecipeName ] ) \u2013 for Ingredients without an amount, we just want to keep track of which recipes we need them for. So that instead of seeing \"coriander\" in the shopping list, we see \"coriander: enough for recipes A, B, C\" unitless ( Number ) \u2013 for Ingredients with no units, we can simply add the amounts, e.g. \"2 apples\" + \"3 apples\" = \"5 apples\" units ( dict [ Unit , Number ] ) \u2013 a mapping of amounts to units. For units that can't be merged like \"cm\" and \"g\" Source code in src/api/shopping_list.py class MergedIngredient(BaseModel): \"\"\" Container class to hold merged Ingredients. Handles a mixture of amountless, unitless, and fully populated Ingredients. It is not possible to merge a fully populated unit with an amountless unit -- e.g. \"2, kg, potatoes\" and \"potatoes\". This is why we need the following attributes Attributes: amountless: for Ingredients without an amount, we just want to keep track of which recipes we need them for. So that instead of seeing \"coriander\" in the shopping list, we see \"coriander: enough for recipes A, B, C\" unitless: for Ingredients with no units, we can simply add the amounts, e.g. \"2 apples\" + \"3 apples\" = \"5 apples\" units: a mapping of amounts to units. For units that can't be merged like \"cm\" and \"g\" \"\"\" # from \"apples\" -> display as \"enough for x\" amountless: list[RecipeName] = [] # from \"4 apples\" unitless: Number = 0 # from \"4 kg apples\" units: dict[Unit, Number] = Field(default_factory=dict) merge_recipes(recipes) Create a combined shopping list by merging the ingredients from multiple recipes. Parameters: recipes ( list [ Recipe ] ) \u2013 the list of recipes we want to generate a shopping list for Returns: ShoppingList \u2013 the merged shopping list Source code in src/api/shopping_list.py def merge_recipes(recipes: list[Recipe]) -> ShoppingList: \"\"\" Create a combined shopping list by merging the ingredients from multiple recipes. Args: recipes: the list of recipes we want to generate a shopping list for Returns: the merged shopping list \"\"\" shopping_list = {} for recipe in recipes: for ing in recipe.ingredients: merged = shopping_list.get(ing.name, MergedIngredient()) match [ing.amount, ing.unit]: case [0, \"\"]: merged.amountless.append(recipe.name) case [amount, \"\"]: merged.unitless += amount case [amount, unit]: amount, unit = normalise(amount, unit) merged.units[unit] = merged.units.get(unit, 0) + amount shopping_list[ing.name] = merged return shopping_list","title":"Shopping list"},{"location":"reference/shopping_list/#src.api.shopping_list.MergedIngredient","text":"Bases: BaseModel Container class to hold merged Ingredients. Handles a mixture of amountless, unitless, and fully populated Ingredients. It is not possible to merge a fully populated unit with an amountless unit -- e.g. \"2, kg, potatoes\" and \"potatoes\". This is why we need the following attributes Attributes: amountless ( list [ RecipeName ] ) \u2013 for Ingredients without an amount, we just want to keep track of which recipes we need them for. So that instead of seeing \"coriander\" in the shopping list, we see \"coriander: enough for recipes A, B, C\" unitless ( Number ) \u2013 for Ingredients with no units, we can simply add the amounts, e.g. \"2 apples\" + \"3 apples\" = \"5 apples\" units ( dict [ Unit , Number ] ) \u2013 a mapping of amounts to units. For units that can't be merged like \"cm\" and \"g\" Source code in src/api/shopping_list.py class MergedIngredient(BaseModel): \"\"\" Container class to hold merged Ingredients. Handles a mixture of amountless, unitless, and fully populated Ingredients. It is not possible to merge a fully populated unit with an amountless unit -- e.g. \"2, kg, potatoes\" and \"potatoes\". This is why we need the following attributes Attributes: amountless: for Ingredients without an amount, we just want to keep track of which recipes we need them for. So that instead of seeing \"coriander\" in the shopping list, we see \"coriander: enough for recipes A, B, C\" unitless: for Ingredients with no units, we can simply add the amounts, e.g. \"2 apples\" + \"3 apples\" = \"5 apples\" units: a mapping of amounts to units. For units that can't be merged like \"cm\" and \"g\" \"\"\" # from \"apples\" -> display as \"enough for x\" amountless: list[RecipeName] = [] # from \"4 apples\" unitless: Number = 0 # from \"4 kg apples\" units: dict[Unit, Number] = Field(default_factory=dict)","title":"MergedIngredient"},{"location":"reference/shopping_list/#src.api.shopping_list.merge_recipes","text":"Create a combined shopping list by merging the ingredients from multiple recipes. Parameters: recipes ( list [ Recipe ] ) \u2013 the list of recipes we want to generate a shopping list for Returns: ShoppingList \u2013 the merged shopping list Source code in src/api/shopping_list.py def merge_recipes(recipes: list[Recipe]) -> ShoppingList: \"\"\" Create a combined shopping list by merging the ingredients from multiple recipes. Args: recipes: the list of recipes we want to generate a shopping list for Returns: the merged shopping list \"\"\" shopping_list = {} for recipe in recipes: for ing in recipe.ingredients: merged = shopping_list.get(ing.name, MergedIngredient()) match [ing.amount, ing.unit]: case [0, \"\"]: merged.amountless.append(recipe.name) case [amount, \"\"]: merged.unitless += amount case [amount, unit]: amount, unit = normalise(amount, unit) merged.units[unit] = merged.units.get(unit, 0) + amount shopping_list[ing.name] = merged return shopping_list","title":"merge_recipes"},{"location":"reference/unit/","text":"Handles normalising and converting between units. normalise(amount, unit) Converts an amount + unit into the preferred internal format (grams or millilitres) if possible Handles alias: (pounds -> lb) system (imperial -> metric): (lb -> kg) denomination: (5kg -> 5000g) Parameters: amount ( Number ) \u2013 the input amount e.g. 2.5 unit ( str ) \u2013 the input unit e.g. \"kilos\" Returns: tuple [ Number , str ] \u2013 The converted amount and unit Source code in src/api/unit.py def normalise(amount: Number, unit: str) -> tuple[Number, str]: \"\"\" Converts an amount + unit into the preferred internal format (grams or millilitres) if possible Handles: - alias: (pounds -> lb) - system (imperial -> metric): (lb -> kg) - denomination: (5kg -> 5000g) Args: amount: the input amount e.g. 2.5 unit: the input unit e.g. \"kilos\" Returns: The converted amount and unit \"\"\" unit = unit.lower() unit = SINGULARS.get(unit, unit) unit = PREFERRED_ALIASES.get(unit, unit) multiplier, internal_unit = CONVERSIONS.get(unit, (1, unit)) return amount * multiplier, internal_unit","title":"Unit"},{"location":"reference/unit/#src.api.unit.normalise","text":"Converts an amount + unit into the preferred internal format (grams or millilitres) if possible Handles alias: (pounds -> lb) system (imperial -> metric): (lb -> kg) denomination: (5kg -> 5000g) Parameters: amount ( Number ) \u2013 the input amount e.g. 2.5 unit ( str ) \u2013 the input unit e.g. \"kilos\" Returns: tuple [ Number , str ] \u2013 The converted amount and unit Source code in src/api/unit.py def normalise(amount: Number, unit: str) -> tuple[Number, str]: \"\"\" Converts an amount + unit into the preferred internal format (grams or millilitres) if possible Handles: - alias: (pounds -> lb) - system (imperial -> metric): (lb -> kg) - denomination: (5kg -> 5000g) Args: amount: the input amount e.g. 2.5 unit: the input unit e.g. \"kilos\" Returns: The converted amount and unit \"\"\" unit = unit.lower() unit = SINGULARS.get(unit, unit) unit = PREFERRED_ALIASES.get(unit, unit) multiplier, internal_unit = CONVERSIONS.get(unit, (1, unit)) return amount * multiplier, internal_unit","title":"normalise"}]}